heat_template_version: 2017-02-24

description: >
  Provides a dbaas Mysql with 2 mounted filesystems.


parameters:
  #---------------------------------------------------------------------
  #                Parameters
  #---------------------------------------------------------------------  

  name:
    type: string
    description: Name of the db instance. It is used to set server name
    default: "dbinstance"

  dns_zone:
    type: string
    description: Dns zone used to set server domain
    default: "site01.nivolapiemonte.it"
  
  key_name:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance
    default: "opstkcsi"

  instance_type:
    type: string
    description: >
        Instance type for server
        -- maximum resources with"m1.big"
    default: "m1.medium"

  volume1_size:
    type: string
    description: >
        Cinder volume size
    default: "20"

  volumedata_size:
    type: string
    description: >
        Cinder volume size
    default: "30"

  server_network:
    type: string
    description: Network used by the db server
    default: "NVLP1-Prov-BE"

  server_network_subnet:
    type: string
    description: Network subnet used by the db server
    default: "NVLP1-Prov-BE-subnet"

  proxy_server:
    type: string
    description: Proxy Server
    default: "http://10.138.149.7:3128"

  security_groups:
    type: comma_delimited_list
    description: >
      Security group to be assigned, NOTE: default must be a single string, not a list
    default: "mysql"

  image_id:
    type: string
    description: >
      Name or ID of the image to use for the db server.
    default: "centos7_lvm"

  db_name:
    type: string
    description: Database name, default dbtest
    default: "dbtest"
    constraints:
      - length: { min: 0, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-z][a-z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters lowercase

  db_appuser_name:
    type: string
    description: The database user account used by apps, default usertest
    default: "usertest"
    hidden: true
    constraints:
      - length: { min: 0, max: 16 }
        description: db_superuser_name must be between 1 and 16 characters

  db_appuser_password:
    type: string
    description: The database user account password used by apps
    default: "N!v0la12vr"
    hidden: true
    constraints:
      - length: { min: 0, max: 41 }
        description: db_superuser_password must be between 1 and 41 characters

  db_root_name:
    type: string
    description: The database admin account username, default root
    default: "root"
    hidden: true
    constraints:
      - length: { min: 0, max: 16 }
        description: db_superuser_name must be between 1 and 16 characters
      - allowed_pattern: '[a-z][a-z0-9]*'
        description: >
          db_superuser_name must begin with a letter and contain only alphanumeric
          characters lowercase

  db_root_password:
    type: string
    description: Root password for mysql user
    default: "N!v0la12vr"
    hidden: true
    constraints:
      - length: { min: 0, max: 41 }
        description: db_root_password must be between 1 and 41 characters


  ip_repository:
    type: string
    description: ip repository
    default: "10.138.144.15"




resources:
  #---------------------------------------------------------------------
  #                Server
  #---------------------------------------------------------------------  
  mysql_volume1:
    type: OS::Cinder::Volume
    properties:
      image: { get_param: image_id }
      size: { get_param: volume1_size }

  mysql_volumedata:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volumedata_size }

  mysql_instance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: host%.dom%
          params:
            "host%": { get_param: name }
            "dom%": { get_param: dns_zone }
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks: [{subnet: {get_param: server_network_subnet}}]
      #networks: [{network: {get_param: server_network}}]
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : mysql_volume1 }, delete_on_termination : "false" }]
      security_groups: { get_param: security_groups }
      user_data_format: SOFTWARE_CONFIG
      config_drive: true

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: mysql_instance }
      volume_id: { get_resource: mysql_volumedata }
      mountpoint: /dev/vdb


  #---------------------------------------------------------------------
  #                Software Config
  #---------------------------------------------------------------------  

  set_etc_hosts:
    depends_on: mysql_instance
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      inputs:
      - name: ip_addr
      - name: server_name
      - name: dns_zone 
      config: |
        #!/bin/bash -v
        set -e
        sudo hostname $server_name.$dns_zone
        sudo echo $server_name.$dns_zone > /etc/hostname
        sudo echo "$ip_addr  $server_name.$dns_zone" >> /etc/hosts
        sudo echo "127.0.0.1 $server_name.$dns_zone" >> /etc/hosts
        sudo sed -i 's/preserve_hostname: false/preserve_hostname: true/g' /etc/cloud/cloud.cfg

  prepare_volume:
    depends_on: mysql_instance
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - name: proxy_server
      config: |
        ---
        - name: Install volume2
          connection: local
          hosts: localhost
          vars:
            proxy_env:
              http_proxy: "{{ proxy_server }}"
              https_proxy: "{{ proxy_server }}"
          tasks:
            - name: install yum-config manager
              yum:
                name: yum-utils
                state: present
            - name: install lvm2
              yum:
                name: lvm2
                state: present
            - name: Create and assign data dir
              file:
                path: "{{ item }}"
                state: directory
                owner: root
                group: root
                mode:  0755
              with_items:
              - "/data"
              ignore_errors: yes
          become: yes
          environment: "{{proxy_env}}"

  format_volume:
    depends_on: prepare_volume
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config: |
        #!/bin/bash
        echo -e "n\np\n1\n\n\nt\n8e\nw"| sudo fdisk /dev/vdb

  mount_volume:
    depends_on: format_volume
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config: |
        #!/bin/bash
        set -e
        sudo pvcreate /dev/vdb1
        sudo vgcreate vg_data /dev/vdb1
        sudo lvcreate -l 100%FREE -n lv_fsdata vg_data
        sudo mkfs.xfs /dev/vg_data/lv_fsdata
        sudo mount /dev/vg_data/lv_fsdata /data/

  install_mysql:
    depends_on: mount_volume
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - name: proxy_server
      - name: db_name
      - name: db_root_name
      - name: db_root_password
      - name: db_appuser_name
      - name: db_appuser_password
      - name: ip_repository
      outputs:
      - name: result
      config: |
        ---
        - name: Install and run MySQL 5.7
          connection: local
          hosts: localhost
          vars:
            proxy_env:
              http_proxy: "{{ proxy_server }}"
              https_proxy: "{{ proxy_server }}"
              no_proxy: "{{ ip_repository }}"
            mysql_enabled_on_startup: yes
            mysql_datadir: "/data"
            mysql_daemon: mysqld
            mysql_packages:
            - 'mysql-community-client'
            - 'mysql-community-common'
            - 'mysql-community-libs'
            - 'mysql-router'
            - 'mysql-community-server'
            - 'mysql-shell'
            mysql_log_error: /data/mysql/mysqld.log
            mysql_syslog_tag: mysqld
            mysql_pid_file: /var/run/mysqld/mysqld.pid
            mysql_socket: /var/lib/mysql/mysql.sock
            mysql_root_username: "{{ db_root_name }}"
            mysql_root_password: "{{ db_root_password }}"
            mysql_db_name: "{{ db_name }}"
            mysql_app_username: "{{ db_appuser_name }}"
            mysql_app_password: "{{ db_appuser_password }}"
            mysql_config_params:
              - { key: "[mysqld]" , value: "[mysqld]" }
              - { key: "socket=" , value: "socket={{ mysql_socket }}" }
              - { key: "symbolic-links=" , value: "symbolic-links=0" }
              - { key: "datadir=" , value: "datadir=/data/mysql" }
              - { key: "port=" , value: "port=3306" }
              - { key: "max_connections=" , value: "max_connections=300" }
              - { key: "max_allowed_packet=" , value: "max_allowed_packet=128M" }
              - { key: "tmpdir=" , value: "tmpdir=/data/tmpdir" }
              - { key: "slow_query_log=" , value: "slow_query_log=1" }
              - { key: "long_query_time=" , value: "long_query_time=5" }
              - { key: "log_bin_trust_function_creators=" , value: "log_bin_trust_function_creators=1" }
              - { key: "log-error=" , value: "log-error={{ mysql_log_error }}" }
              - { key: "pid-file=" , value: "pid-file={{ mysql_pid_file }}" }
              - { key: "[mysqldump]" , value: "[mysqldump]" }
            mysql57_repo_params:
              - { key: "[mysql57]" , value: "[mysql57]" }
              - { key: "name=" , value: "name=mysql57.repo" }
              - { key: "baseurl=" , value: "baseurl= http://{{ ip_repository }}/repos/mysql/5.7.23" }
              - { key: "gpgcheck=" , value: "gpgcheck=0" }
              - { key: "proxy=" , value: "proxy=_none_" }
            trilio_username: "trilio"
            trilio_password: "Oliri10!"
            bck1_username: "rou"
            bck1_password: "M0n!tvr46"
            bck2_username: "mybck"
            bck2_password: "y!7t0oNv"
            
          tasks:
            #- name: Install the MySQL repo.
            #  yum:
            #    name: http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
            #    state: present
            #- name: Install the MySQL repo key.
            #  rpm_key:
            #    state: present
            #    key: http://repo.mysql.com/RPM-GPG-KEY-mysql
            - name: install yum-config manager
              yum:
                name: yum-utils
                state: present
            - name : Create MySQL repo file 
              lineinfile:
                path=/etc/yum.repos.d/mysql57.repo
                line='{{item.value}}'
                state=present
                create=yes
              with_items: "{{ mysql57_repo_params }}"
            - name: Enable 5.7 repo
              shell: "{{ item }}"
              with_items:
              - sudo yum-config-manager --enable mysql57                
            - name: Ensure MySQL packages are installed.
              yum: "name={{ item }} state=installed"
              with_items: "{{ mysql_packages }}"
              register: rh_mysql_install_--packages
            - name: Ensure MySQL Python libraries are installed.
              yum: "name=MySQL-python state=installed"
            - name : Modify /etc/my.cnf step 1 remove old
              lineinfile:
                path=/etc/my.cnf
                regexp='{{item.key}}'
                state=absent
              with_items: "{{ mysql_config_params }}"
            - name : Modify /etc/my.cnf step 2 add new 
              lineinfile:
                path=/etc/my.cnf
                line='{{item.value}}'
                state=present
              with_items: "{{ mysql_config_params }}"
            - name: Create and assign data dir to mysql user
              file:
                path: "{{ item }}"
                state: directory
                owner: mysql
                group: mysql
                mode:  0755
                setype: mysqld_db_t
              with_items:
              - "{{ mysql_datadir }}/mysql"
              - "{{ mysql_datadir }}/tmpdir"
            - name: Ensure MySQL is started and enabled on boot.
              service: "name={{ mysql_daemon }} state=started enabled={{ mysql_enabled_on_startup }}"
            - name: Get mysql temporary password.
              shell: "grep 'temporary password' /data/mysql/mysqld.log | awk '{print $11}'"
              register: mysql_temp_password
            - debug:
                msg: "{{ mysql_temp_password.stdout }}"

            - name: Disable plugin validate_password.
              shell: >
                mysql -u root -p'{{ mysql_temp_password.stdout }}' -NBe 'uninstall plugin validate_password;'
              ignore_errors: yes

            - name: Update MySQL root password for localhost root account (5.7.x).
              shell: >
                mysql --connect-expired-password -u root -p'{{ mysql_temp_password.stdout }}' -NBe
                'ALTER USER "{{ mysql_root_username }}"@"localhost" IDENTIFIED WITH mysql_native_password BY "{{ mysql_root_password }}";'
              ignore_errors: yes
            - name: enable root user with priviledge and grant from %
              mysql_user:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                name: "{{ mysql_root_username}}"
                host: "%"
                password: "{{ mysql_root_password }}"
                priv: '*.*:ALL,GRANT'
                state: present
            - name: enable trilio user with priviledge and grant from localhost
              mysql_user:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                name: "{{ trilio_username }}"
                host: "localhost"
                password: "{{ trilio_password }}"
                priv: '*.*:SELECT,PROCESS,RELOAD'
                state: present
            - name: enable bck1 user with priviledge and grant from %
              mysql_user:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                name: "{{ bck1_username }}"
                host: "%"
                password: "{{ bck1_password }}"
                priv: '*.*:SELECT'
                state: present
            - name: enable bck2 user with priviledge and grant from %
              mysql_user:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                name: "{{ bck2_username }}"
                host: "%"
                password: "{{ bck2_password }}"
                priv: '*.*:SELECT,PROCESS,EXECUTE,SHOW VIEW,EVENT'
                state: present
            - name: MySQL is restarted.
              service: "name={{ mysql_daemon }} state=restarted"
            - file:
                path: /tmp/audit
                state: directory
                mode: 0755
            - name: Unarchive auditlog archive
              unarchive:
                src: http://{{ ip_repository }}/repos/mysql/auditlog/server_audit-1.4.0.tar.gz
                dest: /tmp/audit
                remote_src: yes
            - mysql_variables:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                variable: plugin_dir
              register: plugindir
            - debug:
                msg: "{{ plugindir }}"
            - name: copy plugin file to mysql plugin directory
              copy:
                src: /tmp/audit/server_audit-1.4.0/linux-x86-64/server_audit.so
                #dest:  "{{ plugindir }}/server_audit.so"
                dest:  /usr/lib64/mysql/plugin/server_audit.so
                owner: root
                group: root
                mode: 0755
            - name: download trilio backup file from local repository
              get_url:
                url: "http://{{ ip_repository }}/repos/mysql/backup/trilioconsistentbackup.j2"
                dest:  /tmp
                owner: root
                group: root
                mode: 0755
                use_proxy: yes
            - template:
                src: /tmp/trilioconsistentbackup.j2
                dest: /etc/qemu-ga/fsfreeze-hook.d/trilioconsistentbackup.sh
                owner: root
                group: root
                mode: 0755
            - name: launch audit_log installation.
              shell: >
                mysql -u root -p'{{mysql_root_password }}' -NBe
                'install plugin server_audit soname "server_audit.so";'
              ignore_errors: yes
            - mysql_variables:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                variable: server_audit_file_path
                value: '/data/mysql/server_audit.log'
            - mysql_variables:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                variable: server_audit_events
                value: 'CONNECT,QUERY_DCL'
            - mysql_variables:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                variable: server_audit_incl_users
                value: 'root'
            - mysql_variables:
                login_user: "{{ mysql_root_username }}"
                login_password: "{{ mysql_root_password }}"
                variable: server_audit_logging
                value: 'on'
            - name: Create audit log config file
              file:
                path: "/data/mysql/audit_plugin.sql"
                owner: mysql
                group: mysql
                mode: 0755
                state: "touch"
            - lineinfile:
                path: /data/mysql/audit_plugin.sql
                line: "set global server_audit_file_path='/data/mysql/server_audit.log';"
                state: present
            - lineinfile:
                path: /data/mysql/audit_plugin.sql
                line: "set global server_audit_events='CONNECT,QUERY_DCL';"
                state: present
            - lineinfile:
                path: /data/mysql/audit_plugin.sql
                line: "set global server_audit_incl_users='root';"
                state: present
            - lineinfile:
                path: /data/mysql/audit_plugin.sql
                line: "set global server_audit_logging=on;"
                state: present
            - name: modify my.cnf conf
              lineinfile:
                path: /etc/my.cnf
                line: "init-file=/data/mysql/audit_plugin.sql"
                state: present
                insertafter: EOF
            - name: restart_mysql
              service: "name={{ mysql_daemon }} state=restarted" 
            - name: modify fstab   
              lineinfile:
                path: /etc/fstab
                line: "/dev/vg_data/lv_fsdata /data xfs defaults 0 0"
                state: present 
          become: yes
          environment: "{{proxy_env}}"


  #---------------------------------------------------------------------
  #                Software Deployment
  #---------------------------------------------------------------------  

  deployment_hosts:
    depends_on: mysql_instance
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        ip_addr: {get_attr: [mysql_instance, first_address]}
        server_name: { get_param: name }
        dns_zone: { get_param: dns_zone }
      config:
        get_resource: set_etc_hosts
      server:
        get_resource: mysql_instance

  deployment_prepare:
    depends_on: mysql_instance
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        proxy_server: { get_param: proxy_server }
      config:
        get_resource: prepare_volume
      server:
        get_resource: mysql_instance

  deployment_format:
    depends_on: deployment_prepare
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: format_volume
      server:
        get_resource: mysql_instance

  deployment_volume:
    depends_on: deployment_format
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: mount_volume
      server:
        get_resource: mysql_instance

  deployment_install_mysql:
    depends_on: [install_mysql, deployment_hosts, deployment_volume]
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        ip_repository: { get_param: ip_repository }
        proxy_server: { get_param: proxy_server }
        db_name: { get_param: db_name }
        db_root_name: { get_param: db_root_name }
        db_root_password: { get_param: db_root_password }
        db_appuser_name: { get_param: db_appuser_name }
        db_appuser_password: { get_param: db_appuser_password }
      config:
        get_resource: install_mysql
      server:
        get_resource: mysql_instance


outputs:
  #---------------------------------------------------------------------
  #                Outputs
  #---------------------------------------------------------------------  

  ResourceIP:
    description: Master Server IP address
    value: { get_attr: [mysql_instance, first_address] }

  ResourceHostname:
    description: Master Server Hostname
    value: { get_attr: [mysql_instance, name] }

  ResourceID:
    description: Master Server Resource ID.
    value:
      get_resource: mysql_instance

  MasterDatabaseURL:
    description: URL for mysql
    value:
      str_replace:
        template: host:3306
        params:
          host: { get_attr: [mysql_instance, first_address] }

  deployment_install_mysql_result:
    value:
      get_attr: [deployment_install_mysql, result]

  deployment_install_mysql_status_code:
    value:
      get_attr: [deployment_install_mysql, deploy_status_code]

  deployment_install_mysql_stdout:
    description: Standard output captured from the installuration execution.
    value:
      get_attr: [deployment_install_mysql, deploy_stdout]

  deployment_install_mysql_stderr:
    description: Standard error captured from the installuration execution.
    value:
      get_attr: [deployment_install_mysql, deploy_stderr]

