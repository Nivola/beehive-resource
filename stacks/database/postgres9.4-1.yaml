heat_template_version: 2013-05-23

description: >
  Install a PostgreSQL database on a vm.


parameters:
  #---------------------------------------------------------------------
  #                Postgres Parameters
  #---------------------------------------------------------------------  

  key_name:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance
    default: "dbkey"

  instance_type:
    type: string
    description: >
        Instance type for Postgres server
        -- maximum resources with"m1.big"
    default: "m1.medium"

  volume_size:
    type: string
    description: >
        Cinder volume size
    default: "40"

  db_network:
    type: string
    description: Network used by the db server
    default: "566"
    
  proxy_server:
    type: string
    description: Proxy Server
    default: "http://proxy-srv.csi.it:3128"
    
  image_id:
    type: string
    description: >
      Name or ID of the image to use for the db server.
    default: "centos7-nuovo"

  OS_version:
    type: string
    description: >
      OS version (ex 7 for Centos 7.x)
    default: "7"

  postgresql_version:
    type: string
    description: PostgreSQL version
    default: "9.4"

  db_name:
    type: string
    description: Database name
    default: db01
    constraints:
      - length: { min: 1, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-z][a-z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters lowercase

  db_username:
    type: string
    description: The database admin account username
    default: db01
    hidden: true
    constraints:
      - length: { min: 1, max: 16 }
        description: db_username must be between 1 and 16 characters
      - allowed_pattern: '[a-z][a-z0-9]*'
        description: >
          db_username must begin with a letter and contain only alphanumeric
          characters lowercase
          
  db_password:
    type: string
    description: The database admin account password
    default: password01
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_password must be between 1 and 41 characters
      - allowed_pattern: '[a-z0-9]*'
        description: db_password must contain only alphanumeric characters lowercase
        
  db_root_password:
    type: string
    description: Root password for postgres user
    default: password01
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_root_password must be between 1 and 41 characters
      - allowed_pattern: '[a-z0-9]*'
        description: db_root_password must contain only alphanumeric characters lowercase


resources:
  #---------------------------------------------------------------------
  #                Postgres Server
  #---------------------------------------------------------------------  
  postgres_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks: [{network: {get_param: db_network}}]
      block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : postgres_volume }, delete_on_termination : "false" }]
      user_data_format: SOFTWARE_CONFIG
      config_drive: true

  postgres_volume:
    type: OS::Cinder::Volume
    properties:
      image: { get_param: image_id }
      size: { get_param: volume_size } 

  #---------------------------------------------------------------------
  #                Postgres Software Config
  #---------------------------------------------------------------------  

  set_etc_hosts:
    depends_on: postgres_instance
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      inputs:
      - name: ip_addr       
      config: |
        #!/bin/bash
        set -e
        echo "$ip_addr  $HOSTNAME" >> /etc/hosts



  install_postgres:
    depends_on: postgres_instance
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - name: OS_version
      - name: postgresql_version
      - name: proxy_server
      config: |
        ---
        - name: Install and run PostgreSQL
          connection: local
          hosts: localhost
          vars:
            #OS_version: 7
            #postgresql_version: "9.4"
            remove_old_cluster: yes
            proxy_env:
              http_proxy: "{{ proxy_server }}"
              https_proxy: "{{ proxy_server }}"
            postgresql_repo_Centos:
              - { version: "9.4", repo: "http://yum.postgresql.org/9.4/redhat/rhel-{{ OS_version }}-x86_64/pgdg-centos94-9.4-3.noarch.rpm" }
              - { version: "9.3", repo: "http://yum.postgresql.org/9.3/redhat/rhel-{{ OS_version }}-x86_64/pgdg-centos93-9.3-1.noarch.rpm" }
              - { version: "9.2", repo: "http://yum.postgresql.org/9.2/redhat/rhel-{{ OS_version }}-x86_64/pgdg-centos92-9.2-7.noarch.rpm" }
              - { version: "9.1", repo: "http://yum.postgresql.org/9.1/redhat/rhel-{{ OS_version }}-x86_64/pgdg-centos91-9.1-5.noarch.rpm" }
              - { version: "9.0", repo: "http://yum.postgresql.org/9.0/redhat/rhel-{{ OS_version }}-x86_64/pgdg-centos90-9.0-5.noarch.rpm" }
              - { version: "8.4", repo: "http://yum.postgresql.org/8.4/redhat/rhel-{{ OS_version }}-x86_64/pgdg-centos-8.4-3.noarch.rpm" }
            postrgresql_config_params:
              - { key: "listen_addresses =" , value: "listen_addresses = '*'" }
              - { key: "log_connections =" , value: "log_connections = on" }
              - { key: "log_statement =" , value: "log_statement = 'ddl'" }
              - { key: "log_line_prefix =" , value: "log_line_prefix = '%d %u %t'" }
              - { key: "log_filename =" , value: "log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'" }
              - { key: "checkpoint_completion_target =" , value: "checkpoint_completion_target = 0.9" }
              - { key: "checkpoint_segments =" , value: "checkpoint_segments = 4" }
              - { key: "data_directory =" , value: "data_directory = '/data/postgres'" }
              - { key: "effective_cache_size =" , value: "effective_cache_size = '1024MB'" }
              - { key: "max_connections =" , value: "max_connections = 300" }
              - { key: "shared_buffers =" , value: "shared_buffers = '1024MB'" }
              - { key: "synchronous_commit =" , value: "synchronous_commit = on" }
              - { key: "wal_buffers =" , value: "wal_buffers = -1" }
              - { key: "work_mem =" , value: "work_mem = '2MB'" }
                  
          tasks:
           - name: Add PostgreSQL repository
             yum: 
               state: present
               pkg: "{{ item.repo }}"
             when: item.version == "{{ postgresql_version }}"
             with_items: "{{ postgresql_repo_Centos }}"
           - name: "Install PostgreSQL packages"
             yum: 
               state: latest
               pkg: "{{ item }}"
             with_items:
               - gdal-libs
               - postgresql{{ postgresql_version |replace('.', '') }}
               - postgresql{{ postgresql_version |replace('.', '') }}-server
               - postgresql{{ postgresql_version |replace('.', '') }}-libs
               - postgresql{{ postgresql_version |replace('.', '') }}-contrib
               - postgresql{{ postgresql_version |replace('.', '') }}-devel
               - postgis2_{{ postgresql_version |replace('.', '') }}
               - python-psycopg2
           - name: Create and assign data dir to postgres user
             file:
               path: /data
               state: directory
               owner: postgres
               group: postgres
               mode: 0700
           #next two tasks are to be idempotent
           - name: "Stop old postgresql service"
             service: name="postgresql-{{ postgresql_version }}" state=stopped
             when: remove_old_cluster
           - name: "Remove old postgresql cluster"
             command: "rm -rf /var/lib/pgsql/{{ postgresql_version }}/data /data/postgres/"
             when: remove_old_cluster
           - name : Set PGDATA in service file
             lineinfile : 
               path=/usr/lib/systemd/system/postgresql-{{ postgresql_version }}.service
               regexp='Environment=PGDATA='
               line='Environment=PGDATA=/data/postgres/'
               state=present
           - name: "Initialize new postgresql cluster"
             become_user: "postgres"
             command: "/usr/pgsql-{{ postgresql_version }}/bin/initdb -D /data/postgres/"
           - name: "Start postgresql service"
             service: name="postgresql-{{ postgresql_version }}" state=started enabled=yes
           - name : Modify /pg_hba.conf step 1 remove old
             lineinfile :
               path=/data/postgres/pg_hba.conf
               regexp="{{item}}"
               state=absent
             with_items:        
               - "local   all"
               - "host    all"
           - name : Modify /pg_hba.conf step 2 add new
             lineinfile :
               path=/data/postgres/pg_hba.conf
               line='local   all             all                                     peer\nlocal   all             postgres                                ident\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    all             all             0.0.0.0/0               md5\nhost    all             all             0.0.0.0/0               md5\n'
               state=present
           - name : Modify /data/postgres/postgresql.conf step 1 remove old
             lineinfile:
               path=/data/postgres/postgresql.conf
               regexp='{{item.key}}'
               state=absent
             with_items: "{{ postrgresql_config_params }}"
           - name : Modify /data/postgres/postgresql.conf step 2 remove ad new 
             lineinfile:
               path=/data/postgres/postgresql.conf
               line='{{item.value}}'
               state=present
             with_items: "{{ postrgresql_config_params }}"
           - name: "Restart postgresql service"
             become_user: "postgres"
             command: "/usr/pgsql-{{ postgresql_version }}/bin/pg_ctl -D /data/postgres restart"
           - name: modify fstab   
             lineinfile:
               path: /etc/fstab
               line: "/dev/vg_data/lv_fsdata /data xfs defaults 0 0"
               state: present 
          environment: "{{proxy_env}}"
          become: yes
          


  #---------------------------------------------------------------------
  #                Postgres Software Deployment
  #---------------------------------------------------------------------  


  deployment_first_postgres:
    depends_on: install_postgres
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:      
        ip_addr: {get_attr: [postgres_instance, first_address]} 
      config:
        get_resource: set_etc_hosts
      server:
        get_resource: postgres_instance


  deployment_install_postgres:
    depends_on: [install_postgres, deployment_first_postgres]
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:      
        postgresql_version: { get_param: postgresql_version }
        OS_version: { get_param: OS_version }
        proxy_server: { get_param: proxy_server }
      config:
        get_resource: install_postgres
      server:
        get_resource: postgres_instance


outputs:
  #---------------------------------------------------------------------
  #                Postgres Outputs
  #---------------------------------------------------------------------  
  DatabaseURL:
    description: URL for Postgres
    value:
      str_replace:
        template: host:5432
        params:
          host: { get_attr: [postgres_instance, first_address] }

  deployment_install_postgres_result:
    value:
      get_attr: [deployment_install_postgres, result]
  deployment_install_postgres_status_code:
    value:
      get_attr: [deployment_install_postgres, deploy_status_code]          
  deployment_install_postgres_stdout:
    description: Standard output captured from the installuration execution.
    value:
      get_attr: [deployment_install_postgres, deploy_stdout]
  deployment_install_postgres_stderr:
    description: Standard error captured from the installuration execution.
    value:
      get_attr: [deployment_install_postgres, deploy_stderr]
